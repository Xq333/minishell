!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFFER_SIZE	get_next_line.h	/^#  define BUFFER_SIZE /;"	d
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
DECIMAL	ft_printf.h	/^# define DECIMAL /;"	d
FT_PRINTF_H	ft_printf.h	/^# define FT_PRINTF_H$/;"	d
GET_NEXT_LINE_H	get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
HEXALOW	ft_printf.h	/^# define HEXALOW /;"	d
HEXAUP	ft_printf.h	/^# define HEXAUP /;"	d
LIBFT_H	libft.h	/^# define LIBFT_H$/;"	d
NAME	Makefile	/^NAME = libft.a$/;"	m
OBJ	Makefile	/^OBJ = $(SRC:.c=.o)$/;"	m
SRC	Makefile	/^SRC = ft_atoi.c \\$/;"	m
already	ft_putnbr_base_fd.c	/^static int	already(char *str)$/;"	f	file:
already	ft_sizebase_fd.c	/^static int	already(char *str)$/;"	f	file:
cleanstock	get_next_line.c	/^char	*cleanstock(char *stock)$/;"	f
content	libft.h	/^	void			*content;$/;"	m	struct:s_list
copystock	get_next_line.c	/^char	*copystock(char *stock, char *buffer)$/;"	f
count_set	ft_strtrim.c	/^int	count_set(char const *s1, char const *set)$/;"	f
duplicate	ft_split.c	/^static char	*duplicate(char *src, int start, int end)$/;"	f	file:
freetab	ft_split.c	/^static void	freetab(char **recipe, int i)$/;"	f	file:
ft_atoi	ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_bzero	ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_bzero	get_next_line_utils.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_calloc	get_next_line_utils.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_intputchar_fd	ft_intputchar_fd.c	/^int	ft_intputchar_fd(char c, int fd)$/;"	f
ft_intputstr_fd	ft_intputstr_fd.c	/^int	ft_intputstr_fd(char *s, int fd)$/;"	f
ft_isalnum	ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_join_nextline	get_next_line_utils.c	/^char	*ft_join_nextline(char *s1, char *s2)$/;"	f
ft_lstadd_back	ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	ft_memchr.c	/^void	*ft_memchr(const void *memblock, int searched, size_t size)$/;"	f
ft_memcmp	ft_memcmp.c	/^int	ft_memcmp(const void *ptr1, const void *ptr2, size_t size)$/;"	f
ft_memcpy	ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t size)$/;"	f
ft_memmove	ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t size)$/;"	f
ft_memset	ft_memset.c	/^void	*ft_memset(void *ptr, int value, size_t count)$/;"	f
ft_printf	ft_printf.c	/^int	ft_printf(const char *param, ...)$/;"	f
ft_putarg	ft_printf.c	/^static int	ft_putarg(char c, va_list ap)$/;"	f	file:
ft_putchar_fd	ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_base_fd	ft_putnbr_base_fd.c	/^int	ft_putnbr_base_fd(long nbr, char *base, int fd)$/;"	f
ft_putnbr_fd	ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_sizebase_fd	ft_sizebase_fd.c	/^int	ft_sizebase_fd(size_t nbr, char *base, int fd)$/;"	f
ft_split	ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_strchr	ft_strchr.c	/^char	*ft_strchr(const char *str, int searched)$/;"	f
ft_strdup	ft_strdup.c	/^char	*ft_strdup(const char *str)$/;"	f
ft_striteri	ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f
ft_strjoin	ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	ft_strlcat.c	/^size_t	ft_strlcat(char *dest, const char *src, size_t size)$/;"	f
ft_strlcpy	ft_strlcpy.c	/^size_t	ft_strlcpy(char *dest, const char *src, size_t size)$/;"	f
ft_strlen	ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f
ft_strlen	get_next_line_utils.c	/^int	ft_strlen(char *str)$/;"	f
ft_strmapi	ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	ft_strncmp.c	/^int	ft_strncmp(const char *str1, const char *str2, size_t length)$/;"	f
ft_strnstr	ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f
ft_strrchr	ft_strrchr.c	/^char	*ft_strrchr(const char *str, int searched)$/;"	f
ft_strtrim	ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
get_next_line	get_next_line.c	/^char	*get_next_line(int fd)$/;"	f
get_size	ft_itoa.c	/^static int	get_size(long n)$/;"	f	file:
give_line	get_next_line.c	/^char	*give_line(char *stock, char c)$/;"	f
is_set	ft_strtrim.c	/^static int	is_set(char c, char const *set)$/;"	f	file:
itoa_is_neg	ft_itoa.c	/^static char	*itoa_is_neg(long n)$/;"	f	file:
itoa_is_pos	ft_itoa.c	/^static char	*itoa_is_pos(long n)$/;"	f	file:
line_in_stock	get_next_line_utils.c	/^int	line_in_stock(char *str)$/;"	f
next	libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
plusminus	ft_putnbr_base_fd.c	/^static int	plusminus(char *str)$/;"	f	file:
plusminus	ft_sizebase_fd.c	/^static int	plusminus(char *str)$/;"	f	file:
readbuff_copystock	get_next_line.c	/^char	*readbuff_copystock(int fd, char *stock)$/;"	f
s_list	libft.h	/^typedef struct s_list$/;"	s
splitcount	ft_split.c	/^static int	splitcount(const char *str, char c)$/;"	f	file:
splitter	ft_split.c	/^char	**splitter(char const *s, char c, char **recipe)$/;"	f
t_list	libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
